configure_bashcompletion() {
  if [ -f $(brew --prefix)/etc/bash_completion ]; then
    . $(brew --prefix)/etc/bash_completion
  fi
}

configure_history() {
  HISTSIZE=50000
}

configure_go() {
  export GOPATH=$HOME/.go
  export GO111MODULE=on
}

configure_prompt() {
  PS1='[\W]\$ '
}

configure_homebrew() {
  eval $(/opt/homebrew/bin/brew shellenv)
}

configure_ls_alias() {
  alias ls='ls -G'
  alias ll='ls -lG'
}

configure_ruby_alias() {
  alias bip='bundle install --path vendor/bundle'
  alias ber='bundle exec ruby'
  alias be='bundle exec'
}

configure_vi_alias() {
  alias vi='vim'
}

configure_python_alias() {
  alias mypy='mypy --ignore-missing-imports'

  if which python3 > /dev/null; then
    alias python='python3'
  fi

  if which pip3 > /dev/null; then
    alias pip='pip3'
  fi
}

configure_peco_alias() {
  alias p='peco_tmux_pane'
}

configure_fzf_alias() {
  alias h='fzf_history'
  alias c='fzf_cd'
  alias w='fzf_tmux_window'
}

configure_python() {
  export LC_ALL=ja_JP.UTF-8

  # For pyenv
  # export PYENV_ROOT="$HOME/.pyenv"
  # export PATH="$PYENV_ROOT/bin:$PATH"
  # eval "$(pyenv init -)"

  # For pipenv
  export PIPENV_VENV_IN_PROJECT=1
}

configure_direnv() {
  if which direnv > /dev/null; then
    eval "$(direnv hook bash)"
  fi
}

configure_fasd() {
  if which fasd > /dev/null; then
    eval "$(fasd --init auto)"
  fi
}

fasd_exists() {
  which fasd > /dev/null
  if [ $? -ne 0 ]; then
    echo "Please install fasd"
    return 1
  fi
}

fzf_exists() {
  which fzf > /dev/null
  if [ $? -ne 0 ]; then
    echo "Please install fzf"
    return 1
  fi
}

fzf_history() {
  fzf_exists
  local res=$(history | awk '{$1=""; print}' | sort | uniq | fzf)
  READLINE_LINE=$res
  READLINE_POINT=${#res}

  # For osx
  if [ `uname` = "Darwin" ]; then
      ${READLINE_LINE}
  fi
}

fzf_cd() {
  fzf_exists
  fasd_exists
  local res=$(fasd -d | sort -rn | cut -c 12- | fzf)
  if [ -n "$res" ]; then
    cd $res
  else
    return 1
  fi
}

fzf_tmux_window() {
  fzf_exists
  tmux list-windows | fzf | awk -F':' '{print $1}' | xargs tmux select-window -t
}

fzf_tmux_pane() {
  fzf_exists
  tmux list-panes | fzf | awk -F':' '{print $1}' | xargs tmux select-pane -t
}

configure_aws() {
  complete -C '/usr/local/bin/aws_completer' aws
}

wifi() {
  local usage="Usage: ${FUNCNAME[0]} [on] [off]"

  if [ "$#" -ne 1 ]; then
    echo "$usage"
    return 1
  fi
  
  if [ "$1" == "on" ]; then 
    networksetup -setairportpower en0 on
  elif [ "$1" == "off" ]; then 
    networksetup -setairportpower en0 off
  else
    echo "$usage"
    return 1
  fi
}

eval_funcs() {
  # 関数名が"configure_*"の関数を実行
  local funcs=$(declare -f | grep -oE "configure_\w+")

  for i in $(echo ${funcs}) ; do
    eval ${i}
  done
}

eval_funcs
